newborns <- data.frame(
newborn_id      = numeric(0),
mother_id       = numeric(0),
state           = character(0),
strain          = character(0),   # strain (NA if susceptible)
day_in_hospital = numeric(0),
in_hospital     = logical(0),
stringsAsFactors= FALSE
)
# -------------------------------
# 4) ADMISSION FUNCTION
# -------------------------------
admit_mothers <- function(mothers) {
new_ids <- mother_id_counter:(mother_id_counter + n_admissions - 1)
new_states <- rep("S", n_admissions)
new_strains <- rep(NA, n_admissions)
# Some new mothers may be colonized on admission.
colonized <- runif(n_admissions) < p_community_col
new_states[colonized] <- "C"
new_strains[colonized] <- sample(strains, sum(colonized), replace = TRUE)
new_mothers <- data.frame(
mother_id       = new_ids,
state           = new_states,
strain          = new_strains,
day_in_hospital = rep(0, n_admissions),
in_hospital     = rep(TRUE, n_admissions),
newborn_id      = rep(NA, n_admissions),
stringsAsFactors= FALSE
)
mother_id_counter <<- mother_id_counter + n_admissions
rbind(mothers, new_mothers)
}
# -------------------------------
# 5) BIRTH EVENT FUNCTION
# -------------------------------
birth_event <- function(mothers, newborns) {
for (i in seq_len(nrow(mothers))) {
if (mothers$in_hospital[i] &&
mothers$day_in_hospital[i] == 2 &&
is.na(mothers$newborn_id[i])) {
mother_state <- mothers$state[i]
new_state <- "S"
new_strain <- NA
if (mother_state %in% c("C", "I")) {
if (runif(1) < p_mother_to_newborn) {
new_state <- "C"
new_strain <- mothers$strain[i]  # inherit mother's strain
}
}
newborns <- rbind(newborns,
data.frame(newborn_id      = newborn_id_counter,
mother_id       = mothers$mother_id[i],
state           = new_state,
strain          = new_strain,
day_in_hospital = 0,
in_hospital     = TRUE,
stringsAsFactors = FALSE))
mothers$newborn_id[i] <- newborn_id_counter
newborn_id_counter <<- newborn_id_counter + 1
}
}
list(mothers = mothers, newborns = newborns)
}
# -------------------------------
# 6) HOSPITAL TRANSMISSION FUNCTION (with strain-specific transmissibility)
# -------------------------------
hospital_transmission <- function(mothers, newborns) {
agents_m <- data.frame(
agent_id   = mothers$mother_id,
agent_type = rep("mother", nrow(mothers)),
state      = mothers$state,
strain     = mothers$strain,
in_hosp    = mothers$in_hospital,
stringsAsFactors = FALSE
)
agents_n <- data.frame(
agent_id   = newborns$newborn_id,
agent_type = rep("newborn", nrow(newborns)),
state      = newborns$state,
strain     = newborns$strain,
in_hosp    = newborns$in_hospital,
stringsAsFactors = FALSE
)
agents <- rbind(agents_m, agents_n)
agents <- agents[agents$in_hosp == TRUE, ]
n_agents <- nrow(agents)
if(n_agents <= 1) return(list(mothers = mothers, newborns = newborns))
for (i in 1:n_agents) {
n_contacts <- ifelse(agents$agent_type[i] == "mother", contact_rate, 1)
for (j in 1:n_contacts) {
partner <- sample(seq_len(n_agents)[-i], 1)
state_i <- agents$state[i]
state_partner <- agents$state[partner]
# Check if one agent is infectious (colonized or infected)
if ( (state_i %in% c("C", "I") || state_partner %in% c("C", "I")) ) {
# If agent i is susceptible and partner is infectious:
if (state_i == "S" && state_partner %in% c("C", "I")) {
# Adjust probability by the partner's strain factor.
factor <- strain_transmission[agents$strain[partner]]
effective_p <- p_hospital_trans * factor
if (runif(1) < effective_p) {
agents$state[i] <- "C"
agents$strain[i] <- agents$strain[partner]
}
}
# If partner is susceptible and agent i is infectious:
if (state_partner == "S" && state_i %in% c("C", "I")) {
factor <- strain_transmission[agents$strain[i]]
effective_p <- p_hospital_trans * factor
if (runif(1) < effective_p) {
agents$state[partner] <- "C"
agents$strain[partner] <- agents$strain[i]
}
}
}
}
}
# Update mothers and newborns from the agents data frame.
for (i in seq_len(nrow(mothers))) {
idx <- which(agents$agent_type == "mother" & agents$agent_id == mothers$mother_id[i])
if(length(idx)==1) {
mothers$state[i] <- agents$state[idx]
mothers$strain[i] <- agents$strain[idx]
}
}
for (i in seq_len(nrow(newborns))) {
idx <- which(agents$agent_type == "newborn" & agents$agent_id == newborns$newborn_id[i])
if(length(idx)==1) {
newborns$state[i] <- agents$state[idx]
newborns$strain[i] <- agents$strain[idx]
}
}
list(mothers = mothers, newborns = newborns)
}
# -------------------------------
# 7) PROGRESSION FUNCTION
# -------------------------------
progression <- function(mothers, newborns) {
col_m <- which(mothers$state == "C")
if(length(col_m) > 0) {
prog <- runif(length(col_m)) < p_col_to_inf
mothers$state[col_m[prog]] <- "I"
}
col_n <- which(newborns$state == "C")
if(length(col_n) > 0) {
prog <- runif(length(col_n)) < p_col_to_inf
newborns$state[col_n[prog]] <- "I"
}
list(mothers = mothers, newborns = newborns)
}
# -------------------------------
# 8) DISCHARGE FUNCTION
# -------------------------------
discharge <- function(mothers, newborns) {
disc_m <- which(mothers$in_hospital & mothers$day_in_hospital >= discharge_time)
if(length(disc_m) > 0) {
mothers$in_hospital[disc_m] <- FALSE
}
disc_n <- which(newborns$in_hospital & newborns$day_in_hospital >= discharge_time)
if(length(disc_n) > 0) {
newborns$in_hospital[disc_n] <- FALSE
}
list(mothers = mothers, newborns = newborns)
}
# -------------------------------
# 9) SIMULATION LOOP
# -------------------------------
simulation_records <- list()
for (t in 1:n_timesteps) {
# Admit new mothers at the beginning of each time step.
mothers <- admit_mothers(mothers)
# Birth event: mothers give birth on day 2.
out_birth <- birth_event(mothers, newborns)
mothers <- out_birth$mothers
newborns <- out_birth$newborns
# Hospital transmission events.
out_trans <- hospital_transmission(mothers, newborns)
mothers <- out_trans$mothers
newborns <- out_trans$newborns
# Progression from colonized to infected.
out_prog <- progression(mothers, newborns)
mothers <- out_prog$mothers
newborns <- out_prog$newborns
# Increment hospital days for agents still in hospital.
mothers$day_in_hospital[mothers$in_hospital] <- mothers$day_in_hospital[mothers$in_hospital] + 1
newborns$day_in_hospital[newborns$in_hospital] <- newborns$day_in_hospital[newborns$in_hospital] + 1
# Discharge agents who have reached the threshold.
out_disc <- discharge(mothers, newborns)
mothers <- out_disc$mothers
newborns <- out_disc$newborns
# Record summary statistics.
simulation_records[[t]] <- data.frame(
time                = t,
mothers_in_hospital = sum(mothers$in_hospital),
mothers_colonized   = sum(mothers$state == "C" & mothers$in_hospital),
mothers_infected    = sum(mothers$state == "I" & mothers$in_hospital),
newborns_in_hospital= sum(newborns$in_hospital),
newborns_colonized  = sum(newborns$state == "C" & newborns$in_hospital),
newborns_infected   = sum(newborns$state == "I" & newborns$in_hospital)
)
}
simulation_df <- do.call(rbind, simulation_records)
print(simulation_df)
library(dplyr)
# For mothers
infections_by_strain_mothers <- mothers %>%
filter(state == "I" & !is.na(strain)) %>%
group_by(strain) %>%
summarise(count = n())
print(infections_by_strain_mothers)
# For newborns
infections_by_strain_newborns <- newborns %>%
filter(state == "I" & !is.na(strain)) %>%
group_by(strain) %>%
summarise(count = n())
print(infections_by_strain_newborns)
# Or combine mothers and newborns
all_agents <- bind_rows(mothers, newborns)
infections_by_strain <- all_agents %>%
filter(state == "I" & !is.na(strain)) %>%
group_by(strain) %>%
summarise(count = n())
print(infections_by_strain)
# -------------------------------
# 1) SETUP
# -------------------------------
# Model parameters
initial_mothers     <- 50    # initial number of mothers in hospital
n_timesteps         <- 365    # number of simulation steps (days)
n_admissions        <- 5     # number of new mothers admitted each day
p_community_col     <- 0.1   # probability a newly admitted mother is colonized
p_hospital_trans    <- 0.05  # base probability of transmission during a contact event
p_mother_to_newborn <- 0.2   # probability colonized mother transmits to newborn at birth
contact_rate        <- 3     # number of contacts per mother per time step
p_col_to_inf        <- 0.02  # daily probability that a colonized agent becomes infected
discharge_time      <- 5     # days after which an agent is discharged
# Define possible strains for Klebsiella and their relative transmissibility factors
strains <- c("K1", "K2", "K3")
strain_transmission <- c(K1 = 1.0, K2 = 1.5, K3 = 0.8)
# -------------------------------
# 2) GLOBAL COUNTERS
# -------------------------------
mother_id_counter <- initial_mothers + 1  # unique ID for future mothers
newborn_id_counter <- 1                     # unique ID for newborns
# -------------------------------
# 3) INITIALIZE AGENTS
# -------------------------------
# Mothers data frame with additional columns.
mothers <- data.frame(
mother_id       = 1:initial_mothers,
state           = rep("S", initial_mothers),  # S: susceptible, C: colonized, I: infected
strain          = NA,                         # strain (NA for susceptible)
day_in_hospital = rep(0, initial_mothers),
in_hospital     = rep(TRUE, initial_mothers),
newborn_id      = rep(NA, initial_mothers),
stringsAsFactors= FALSE
)
# For initially admitted mothers, assign colonization probabilistically.
colonized_indices <- sample(1:initial_mothers, size = round(initial_mothers * p_community_col))
mothers$state[colonized_indices] <- "C"
mothers$strain[colonized_indices] <- sample(strains, length(colonized_indices), replace = TRUE)
# Newborns data frame, initially empty.
newborns <- data.frame(
newborn_id      = numeric(0),
mother_id       = numeric(0),
state           = character(0),
strain          = character(0),   # strain (NA if susceptible)
day_in_hospital = numeric(0),
in_hospital     = logical(0),
stringsAsFactors= FALSE
)
# -------------------------------
# 4) ADMISSION FUNCTION
# -------------------------------
admit_mothers <- function(mothers) {
new_ids <- mother_id_counter:(mother_id_counter + n_admissions - 1)
new_states <- rep("S", n_admissions)
new_strains <- rep(NA, n_admissions)
# Some new mothers may be colonized on admission.
colonized <- runif(n_admissions) < p_community_col
new_states[colonized] <- "C"
new_strains[colonized] <- sample(strains, sum(colonized), replace = TRUE)
new_mothers <- data.frame(
mother_id       = new_ids,
state           = new_states,
strain          = new_strains,
day_in_hospital = rep(0, n_admissions),
in_hospital     = rep(TRUE, n_admissions),
newborn_id      = rep(NA, n_admissions),
stringsAsFactors= FALSE
)
mother_id_counter <<- mother_id_counter + n_admissions
rbind(mothers, new_mothers)
}
# -------------------------------
# 5) BIRTH EVENT FUNCTION
# -------------------------------
birth_event <- function(mothers, newborns) {
for (i in seq_len(nrow(mothers))) {
if (mothers$in_hospital[i] &&
mothers$day_in_hospital[i] == 2 &&
is.na(mothers$newborn_id[i])) {
mother_state <- mothers$state[i]
new_state <- "S"
new_strain <- NA
if (mother_state %in% c("C", "I")) {
if (runif(1) < p_mother_to_newborn) {
new_state <- "C"
new_strain <- mothers$strain[i]  # inherit mother's strain
}
}
newborns <- rbind(newborns,
data.frame(newborn_id      = newborn_id_counter,
mother_id       = mothers$mother_id[i],
state           = new_state,
strain          = new_strain,
day_in_hospital = 0,
in_hospital     = TRUE,
stringsAsFactors = FALSE))
mothers$newborn_id[i] <- newborn_id_counter
newborn_id_counter <<- newborn_id_counter + 1
}
}
list(mothers = mothers, newborns = newborns)
}
# -------------------------------
# 6) HOSPITAL TRANSMISSION FUNCTION (with strain-specific transmissibility)
# -------------------------------
hospital_transmission <- function(mothers, newborns) {
agents_m <- data.frame(
agent_id   = mothers$mother_id,
agent_type = rep("mother", nrow(mothers)),
state      = mothers$state,
strain     = mothers$strain,
in_hosp    = mothers$in_hospital,
stringsAsFactors = FALSE
)
agents_n <- data.frame(
agent_id   = newborns$newborn_id,
agent_type = rep("newborn", nrow(newborns)),
state      = newborns$state,
strain     = newborns$strain,
in_hosp    = newborns$in_hospital,
stringsAsFactors = FALSE
)
agents <- rbind(agents_m, agents_n)
agents <- agents[agents$in_hosp == TRUE, ]
n_agents <- nrow(agents)
if(n_agents <= 1) return(list(mothers = mothers, newborns = newborns))
for (i in 1:n_agents) {
n_contacts <- ifelse(agents$agent_type[i] == "mother", contact_rate, 1)
for (j in 1:n_contacts) {
partner <- sample(seq_len(n_agents)[-i], 1)
state_i <- agents$state[i]
state_partner <- agents$state[partner]
# Check if one agent is infectious (colonized or infected)
if ( (state_i %in% c("C", "I") || state_partner %in% c("C", "I")) ) {
# If agent i is susceptible and partner is infectious:
if (state_i == "S" && state_partner %in% c("C", "I")) {
# Adjust probability by the partner's strain factor.
factor <- strain_transmission[agents$strain[partner]]
effective_p <- p_hospital_trans * factor
if (runif(1) < effective_p) {
agents$state[i] <- "C"
agents$strain[i] <- agents$strain[partner]
}
}
# If partner is susceptible and agent i is infectious:
if (state_partner == "S" && state_i %in% c("C", "I")) {
factor <- strain_transmission[agents$strain[i]]
effective_p <- p_hospital_trans * factor
if (runif(1) < effective_p) {
agents$state[partner] <- "C"
agents$strain[partner] <- agents$strain[i]
}
}
}
}
}
# Update mothers and newborns from the agents data frame.
for (i in seq_len(nrow(mothers))) {
idx <- which(agents$agent_type == "mother" & agents$agent_id == mothers$mother_id[i])
if(length(idx)==1) {
mothers$state[i] <- agents$state[idx]
mothers$strain[i] <- agents$strain[idx]
}
}
for (i in seq_len(nrow(newborns))) {
idx <- which(agents$agent_type == "newborn" & agents$agent_id == newborns$newborn_id[i])
if(length(idx)==1) {
newborns$state[i] <- agents$state[idx]
newborns$strain[i] <- agents$strain[idx]
}
}
list(mothers = mothers, newborns = newborns)
}
# -------------------------------
# 7) PROGRESSION FUNCTION
# -------------------------------
progression <- function(mothers, newborns) {
col_m <- which(mothers$state == "C")
if(length(col_m) > 0) {
prog <- runif(length(col_m)) < p_col_to_inf
mothers$state[col_m[prog]] <- "I"
}
col_n <- which(newborns$state == "C")
if(length(col_n) > 0) {
prog <- runif(length(col_n)) < p_col_to_inf
newborns$state[col_n[prog]] <- "I"
}
list(mothers = mothers, newborns = newborns)
}
# -------------------------------
# 8) DISCHARGE FUNCTION
# -------------------------------
discharge <- function(mothers, newborns) {
disc_m <- which(mothers$in_hospital & mothers$day_in_hospital >= discharge_time)
if(length(disc_m) > 0) {
mothers$in_hospital[disc_m] <- FALSE
}
disc_n <- which(newborns$in_hospital & newborns$day_in_hospital >= discharge_time)
if(length(disc_n) > 0) {
newborns$in_hospital[disc_n] <- FALSE
}
list(mothers = mothers, newborns = newborns)
}
# -------------------------------
# 9) SIMULATION LOOP
# -------------------------------
simulation_records <- list()
for (t in 1:n_timesteps) {
# Admit new mothers at the beginning of each time step.
mothers <- admit_mothers(mothers)
# Birth event: mothers give birth on day 2.
out_birth <- birth_event(mothers, newborns)
mothers <- out_birth$mothers
newborns <- out_birth$newborns
# Hospital transmission events.
out_trans <- hospital_transmission(mothers, newborns)
mothers <- out_trans$mothers
newborns <- out_trans$newborns
# Progression from colonized to infected.
out_prog <- progression(mothers, newborns)
mothers <- out_prog$mothers
newborns <- out_prog$newborns
# Increment hospital days for agents still in hospital.
mothers$day_in_hospital[mothers$in_hospital] <- mothers$day_in_hospital[mothers$in_hospital] + 1
newborns$day_in_hospital[newborns$in_hospital] <- newborns$day_in_hospital[newborns$in_hospital] + 1
# Discharge agents who have reached the threshold.
out_disc <- discharge(mothers, newborns)
mothers <- out_disc$mothers
newborns <- out_disc$newborns
# Record summary statistics.
simulation_records[[t]] <- data.frame(
time                = t,
mothers_in_hospital = sum(mothers$in_hospital),
mothers_colonized   = sum(mothers$state == "C" & mothers$in_hospital),
mothers_infected    = sum(mothers$state == "I" & mothers$in_hospital),
newborns_in_hospital= sum(newborns$in_hospital),
newborns_colonized  = sum(newborns$state == "C" & newborns$in_hospital),
newborns_infected   = sum(newborns$state == "I" & newborns$in_hospital)
)
}
simulation_df <- do.call(rbind, simulation_records)
print(simulation_df)
library(dplyr)
# For mothers
infections_by_strain_mothers <- mothers %>%
filter(state == "I" & !is.na(strain)) %>%
group_by(strain) %>%
summarise(count = n())
print(infections_by_strain_mothers)
# For newborns
infections_by_strain_newborns <- newborns %>%
filter(state == "I" & !is.na(strain)) %>%
group_by(strain) %>%
summarise(count = n())
print(infections_by_strain_newborns)
# Or combine mothers and newborns
all_agents <- bind_rows(mothers, newborns)
infections_by_strain <- all_agents %>%
filter(state == "I" & !is.na(strain)) %>%
group_by(strain) %>%
summarise(count = n())
print(infections_by_strain)
library(dplyr)
source("funcs/identify_epi_data.R")
setwd("~/Documents/BayesPrev")
source("funcs/identify_epi_data.R")
testdat1 <- read.csv("sample_data.csv") # Insert your own data here
# Automatic Mode
results_automatic <- identify_epi_data(testdat1)
head(results_automatic)
# Automatic Mode
results_automatic <- identify_epi_data(testdat1)
head(results_automatic)
# Semi-manual Mode - Specify numeric columns
results_manual1 <- identify_epi_data(testdat1, counts = c("adj_count", "adj_sum"))
head(results_manual1)
# Semi-manual Mode - Specify numeric columns
results_manual1 <- identify_epi_data(testdat1, counts = c("adj_count", "adj_sum"))
# Semi-manual Mode - Specify numeric columns
results_manual1 <- identify_epi_data(testdat1, counts = c("adj_count", "adj_sum"))
head(results_manual1)
# Semi-manual Mode - Specify numeric columns
results_manual1 <- identify_epi_data(testdat1, counts = c("adj_count", "adj_sum"))
head(results_manual1)
# Semi-manual Mode - Specify grouping columns
results_manual2 <- identify_epi_data(testdat1, groups = c("Site", "Region"))
head(results_manual2)
results_manual3 <- identify_epi_data(testdat1, counts = c("adj_count", "adj_sum"), groups = c("Site", "Region"))
head(results_manual3)
